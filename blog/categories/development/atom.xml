<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Software Development and related activities]]></title>
  <link href="http://uthark.github.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://uthark.github.com/"/>
  <updated>2014-04-07T11:01:23-04:00</updated>
  <id>http://uthark.github.com/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Initializing Mockito @Mocks with JUnit @Rule]]></title>
    <link href="http://uthark.github.com/blog/2014/03/28/initializing-at-mocks-with-junit-at-rule/"/>
    <updated>2014-03-28T13:24:45-04:00</updated>
    <id>http://uthark.github.com/blog/2014/03/28/initializing-at-mocks-with-junit-at-rule</id>
    <content type="html"><![CDATA[<p>In this post I will show how one can implement custom JUnit <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/Rule.html">@Rule</a>.</p>

<p>As an example let&rsquo;s take <a href="https://code.google.com/p/mockito/">Mockito</a> and implement custom rule which will initialize Mocks in  test class.</p>

<p>By default, Mockito provides the following methods of mock initialization:</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class)">Mockito.mock</a></li>
</ol>


<p>``` java Initialize mocks with Mockito.mock
public void FooTest {</p>

<pre><code>private Foo foo;

@Before
public void setUp() {
    FooDependency dep = Mockito.mock(FooDependency.class);
    foo = new Foo(dep);
}
</code></pre>

<p>}
```</p>

<p>This is the simplest case.</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockitoAnnotations.html#initMocks(java.lang.Object)">MockitoAnnotations</a>.</li>
</ol>


<p>``` java Initialize mocks with MockitoAnnotations
public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    foo = new Foo(dep);
}
</code></pre>

<p>}
```</p>

<p>This method is useful when you have a lot of mocks to inject.</p>

<ol>
<li><p>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/runners/MockitoJUnitRunner.html">MockitoJUnitRunner</a>
``` java Initialize mocks with MockitoJUnitRunner
@RunWith(MockitoJUnitRunner.class)
public void FooTest {</p>

<p>  private Foo foo;</p>

<p>  @Mock
  private FooDependency dep;</p>

<p>  @Before
  public void setUp() {
      foo = new Foo(dep);
  }
}
```</p></li>
</ol>


<p>I want to show you another method, by using custom JUnit <code>@Rule</code>.</p>

<p>First, we need to implement <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/rules/TestRule.html">TestRule</a> interface which allows to implement custom behaviour during test execution:</p>

<p>``` java MockitoInitializerRule
public class MockitoInitializerRule implements TestRule {</p>

<pre><code>private Object test;

public MockitoInitializerRule(Object test) {
    this.test = test;
}

@Override
public Statement apply(Statement base, Description description) {
    return new MockitInitilizationStatement(base, test);
}
</code></pre>

<p>}
```</p>

<p>We need to pass current test class instance to the rule, so it will be possible inject mocks into class instance. Actual implementation of our rule will go to new class &ndash; subclass of <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/runners/model/Statement.html">Statement</a>:</p>

<p>``` java MockitInitilizationStatement
class MockitInitilizationStatement extends Statement {</p>

<pre><code>private final Statement base;
private Object test;

MockitInitilizationStatement(Statement base, Object test) {
    this.base = base;
    this.test = test;
}

@Override
public void evaluate() throws Throwable {
    MockitoAnnotations.initMocks(test);
    base.evaluate();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>What we do is basically initialize mocks in the test class and then proceed with the test method execution.</p>

<p>Now, let&rsquo;s take a look at the usage of newly created Rule:</p>

<p>``` java Example usage of MockitoInitializerRule
public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Rule
public TestRule mockitoInitializerRule = new MockitoInitializerRule(this);

@Before
public void setUp() {
    foo = new Foo(dep);
}
</code></pre>

<p>}
```</p>

<p>Comparing to variant with <code>MockitoJUnitRunner</code> this one provides ability to use custom <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/runner/Runner.html">Runner</a>, i.e. we can continue to use <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.html">SpringJUnit4ClassRunner</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Life fee]]></title>
    <link href="http://uthark.github.com/blog/2014/03/14/life-fee/"/>
    <updated>2014-03-14T23:42:10-04:00</updated>
    <id>http://uthark.github.com/blog/2014/03/14/life-fee</id>
    <content type="html"><![CDATA[<p>Found in sources:</p>

<p>``` java
try {</p>

<pre><code>// do some business logic.
</code></pre>

<p>} catch (Exception e) {</p>

<pre><code>errorBean.addError("System exception. Unable to locate life fee.");
</code></pre>

<p>}
```</p>

<p>This is just awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Limiting threads count for GreenRobot EventBus]]></title>
    <link href="http://uthark.github.com/blog/2014/03/06/limiting-threads-count-for-greenrobot-eventbus/"/>
    <updated>2014-03-06T22:38:54-05:00</updated>
    <id>http://uthark.github.com/blog/2014/03/06/limiting-threads-count-for-greenrobot-eventbus</id>
    <content type="html"><![CDATA[<p>In one of my projects I used <a href="https://github.com/greenrobot/EventBus">EventBus</a> library. The library is pretty cool and I would recommend everybody to use it.</p>

<p>But I found one small issue with this library &ndash; in case you send too many events very fast (i.e. more than 1000 per second) you may face issue with application crash due to inability to create new thread.</p>

<p>The problem is lying in the used <code>ExecutorService</code>:</p>

<p>``` java
package de.greenrobot.event;
// imports
public final class EventBus {</p>

<pre><code>static ExecutorService executorService = Executors.newCachedThreadPool();

// class content skipped 
</code></pre>

<p>}
```</p>

<p>As you can see, it calls <code>newCachedThreadPool</code> method to create thread pool.</p>

<p>From <a href="http://developer.android.com/reference/java/util/concurrent/Executors.html#newCachedThreadPool()">javadoc</a> for this method:</p>

<blockquote><p>Creates a thread pool that creates new threads as needed, but will reuse
previously constructed threads when they are available.</p></blockquote>

<p>This is where we hit the wall &ndash; if we send too many requests and each request is slow (i.e. saving into database or network request) then we will try to create too many threads and app will crash.</p>

<p>Thankfully, <code>executorService</code> is <code>static</code> but not <code>final</code>. And this will allow us to solve the issue easily.</p>

<p>Let&rsquo;s create our configurer class in package <code>de.greenrobot.event</code> so we will be able to access <code>executorService</code> property which is package-visible and override it with different thread pool:</p>

<p>``` java EventBusExecutorServiceConfigurer
package de.greenrobot.event;</p>

<p>import java.util.concurrent.Executors;</p>

<p>public class EventBusExecutorServiceConfigurer {</p>

<pre><code>public void configureEventBus() {
    ExecutorService executorServiceToUse;
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {
        executorServiceToUse = (ExecutorService) AsyncTask.THREAD_POOL_EXECUTOR;
    } else {
        executorServiceToUse = Executors.newFixedThreadPool(
            Runtime.getRuntime().availableProcessors());
    }
    EventBus.executorService = executorServiceToUse;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Android 3.0+ has special <a href="http://developer.android.com/reference/android/os/AsyncTask.html#THREAD_POOL_EXECUTOR">THREAD_POOL_EXECUTOR</a> which is supposed to be used by asynchronous tasks, so we use it on newer devices. On older, pre-Honeycomb devices we create our own thread pool.</p>

<p>And then in Android application we configure <code>executorService</code>:</p>

<p>``` java
public class CustomApplication extends Application {</p>

<pre><code>@Override
public void onCreate() {
    super.onCreate();
    new EventBusExecutorServiceConfigurer().configureEventBus();

    // other initialization
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using custom font in Android TextView]]></title>
    <link href="http://uthark.github.com/blog/2014/03/06/customizing-font-in-android-textview/"/>
    <updated>2014-03-06T19:13:17-05:00</updated>
    <id>http://uthark.github.com/blog/2014/03/06/customizing-font-in-android-textview</id>
    <content type="html"><![CDATA[<p>Today I want to share with you custom <a href="http://developer.android.com/reference/android/widget/TextView.html">TextView</a> which allows to set font to be used in xml layout.</p>

<p>First, we need to declare our custom styleable</p>

<p>``` xml attrs.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<resources></p>

<pre><code>&lt;declare-styleable name="TypefaceTextView"&gt;
    &lt;attr name="typeface" format="string"/&gt;
&lt;/declare-styleable&gt;
</code></pre>

<p></resources></p>

<p>```</p>

<p>Then we need to create subclass of <code>TextView</code> which will use custom attribute.</p>

<p>``` java TypefaceTextView
public class TypefaceTextView extends TextView {</p>

<pre><code>public TypefaceTextView(Context context) {
    this(context, null);
}

public TypefaceTextView(Context context, AttributeSet attrs) {
    this(context, attrs, 0);
}

public TypefaceTextView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);

    TypedArray ta = context.getTheme().obtainStyledAttributes(attrs, R.styleable.TypefaceTextView, 0, 0);
    try {
        String font = ta.getString(R.styleable.TypefaceTextView_typeface);
        if (null == font) {
            font = context.getString(R.string.default_font_name);
        }
        Typeface typeface = TypefaceCache.getTypeface(context, font);
        if (null != typeface) {
            setTypeface(typeface);
        }

    } finally {
        ta.recycle();
    }
}
</code></pre>

<p>}
```</p>

<p>Also, above class allows to use default custom font, all is needed is to define its name in <code>strings.xml</code></p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<resources></p>

<pre><code>&lt;string name="default_font_name" translatable="false"&gt;custom.ttf&lt;/string&gt;
</code></pre>

<p></resources>
```</p>

<p>Due to the <a href="https://code.google.com/p/android/issues/detail?id=9904">bug in Android</a> we have to cache all created typefaces in cache:</p>

<p>``` java TypefaceCache
public class TypefaceCache {</p>

<pre><code>private static final Map&lt;String, Typeface&gt; CACHE = new HashMap&lt;String, Typeface&gt;();

public static Typeface getTypeface(Context context, String font) {
    if (null == font) {
        return null;
    }
    Typeface typeface = CACHE.get(font);
    if (null == typeface) {

        typeface = Typeface.createFromAsset(context.getAssets(), font);
        CACHE.put(font, typeface);
    }
    return typeface;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Basically, that&rsquo;s it. In order to use it is required to put TTF font in the <code>assets</code> folder and reference the font:</p>

<p>``` xml Example usage.
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;com.example.android.widget.TypefaceTextView</p>

<pre><code>xmlns:a="http://schemas.android.com/apk/res/android"
xmlns:custom="http://schemas.android.com/apk/res-auto"
a:layout_width="match_parent"
custom:typeface="custom-font.ttf"/&gt;
</code></pre>

<p>```</p>

<p>And the last use case it to set custom font for the actionbar title. In this case we can implement custom <a href="http://developer.android.com/reference/android/text/style/CharacterStyle.html"><code>android.text.style.CharacterStyle</code></a></p>

<p>``` java TypefaceSpan
public class TypefaceSpan extends MetricAffectingSpan {</p>

<pre><code>private Typeface mTypeface;

/**
 * Load the {@link Typeface} and apply to a {@link Spannable}.
 */
public TypefaceSpan(Context context, String typefaceName) {
    mTypeface = TypefaceCache.getTypeface(context, typefaceName);
}

@Override
public void updateMeasureState(TextPaint p) {
    p.setTypeface(mTypeface);

    // Note: This flag is required for proper typeface rendering
    p.setFlags(p.getFlags() | Paint.SUBPIXEL_TEXT_FLAG);
}

@Override
public void updateDrawState(TextPaint tp) {
    tp.setTypeface(mTypeface);

    // Note: This flag is required for proper typeface rendering
    tp.setFlags(tp.getFlags() | Paint.SUBPIXEL_TEXT_FLAG);
}
</code></pre>

<p>}
```</p>

<p>Then we can set actionbar title using the following code:</p>

<p>``` java
public static void setActionBarTitle(Activity context, CharSequence title) {</p>

<pre><code>SpannableString s = new SpannableString(title);
s.setSpan(new TypefaceSpan(context, context.getString(R.string.default_font_name)), 0, s.length(),
    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {
    context.getActionBar().setTitle(s);
}
</code></pre>

<p>}
```</p>

<h3>Additional information</h3>

<ol>
<li><a href="http://developer.android.com/training/custom-views/#create-view.html">Creating a View Class | Android Developers</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving issue with DB2 on VMWare Fusion on MacBook Pro 2013 Late]]></title>
    <link href="http://uthark.github.com/blog/2014/03/05/solving-issue-with-db2-on-vmware-fusion-on-macbook-pro-2013-late/"/>
    <updated>2014-03-05T14:41:54-05:00</updated>
    <id>http://uthark.github.com/blog/2014/03/05/solving-issue-with-db2-on-vmware-fusion-on-macbook-pro-2013-late</id>
    <content type="html"><![CDATA[<p>Today I found issue running DB2 10.1 under VMWare Fusion 6.0.2 on my MacBook &ndash; all management services for <code>db2</code> are starting except for the db2 instance itself.</p>

<p>When I tried to start DB2 using <code>db2start</code> it just crashed without any additional information.</p>

<p>After some googling I found out that it is due to the fact that current version of DB2 can&rsquo;t handle more than 4 responses to CPUID query.</p>

<p>The workaround is to update VMWare configuration file for the virtual machine.</p>

<p><code>ini Changes to *.vmx file
monitor_control.enable_fullcpuid = TRUE
cpuid.4.4.eax = "0000:0000:0000:0000:0000:0000:0000:0000"
</code></p>

<p>The answer was found on <a href="https://communities.vmware.com/thread/461857">VMWare Community Forums</a></p>
]]></content>
  </entry>
  
</feed>
