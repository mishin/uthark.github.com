<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: аспекты | Блог о разработке ПО]]></title>
  <link href="http://uthark.github.com/blog/categories/аспекты/atom.xml" rel="self"/>
  <link href="http://uthark.github.com/"/>
  <updated>2012-07-18T19:40:27+07:00</updated>
  <id>http://uthark.github.com/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Немножко магии от AspectJ]]></title>
    <link href="http://uthark.github.com/blog/2012/01/28/aspectj/"/>
    <updated>2012-01-28T02:43:00+07:00</updated>
    <id>http://uthark.github.com/blog/2012/01/28/aspectj</id>
    <content type="html"><![CDATA[<div class='post'>
Наверно, вы уже сталкивались с таким понятием, как AOП - <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">аспектно-ориентированное программирование</a>.<br />
<br />
Обычно, про него вспоминают, когда говорят про <a href="http://static.springsource.org/spring/docs/current/reference/html/transaction.html#transaction-declarative-applying-more-than-just-tx-advice">декларативное использование транзакций</a>,  про <a href="https://docs.jboss.com/aop/1.0/aspect-library/reference/annotation15_security.html">проверку прав доступа</a>, либо про <a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/aop/interceptor/CustomizableTraceInterceptor.html">реализацию журналирования</a>.<br />
<br />
Но это не единственные области применения АОП.<br />
<br />
Я хочу показать ещё пару областей применения из реальных проектов:<br />
<br />
1. Модификация исходного кода для реализации дополнительных возможностей.<br />
2. Принудительная проверка контракта между модулями.<br />
<br />
<h4>Модификация исходного кода для реализации дополнительных возможностей</h4>Предположим, что у нас есть модуль в приложении, который предоставляет нужную нам функциональность. С модулем всё в порядке, кроме одного - все его методы могут выбрасывать проверяемые исключения, что ведёт к ухудшению читаемости кода, так как вместо простого вызова метода:<br />
<br />
<pre class="brush:java;">service.doUsefulThing();
</pre><br />
наш вызов превращается в <br />
<br />
<pre class="brush:java;">try {
        service.doUsefulThing();
    } catch ( FirstServiceException e) {
        processException(e);
    } catch ( SecondServiceException e) {
        processException(e);
    }
</pre><br />
Дополнительная проблема в том, что у модуля количество модулей 10+, количество методов также велико, что приводит к тому, что блоки <tt>try/catch</tt> замусоривают код. Решение с использованием паттерна <tt><a href="https://en.wikipedia.org/wiki/Callback_(computer_programming)">Callback</a></tt> также приведёт к замусориванию кода.<br />
<br />
<h5>Вариант решения проблемы с использованием AOP</h5>Решение данной проблемы было таким - а что, если используя возможности AOP трансформировать проверяемое исключение в непроверяемое? Таким образом, мы сможем избавиться от скучной проверки на исключения в нашем коде, а для обработки исключения (ведь мы всегда его будем обрабатывать одинаково) достаточно будет использовать обработку исключения на верхнем уровне абстракции.<br />
<br />
Для более элегантного решения проблемы было решено добавить собственную аннотацию, которой нужно помечать метод, который использует сервис из "плохого" модуля.<br />
<br />
<pre class="brush:java;">package com.blogger.atamanenko;

import java.lang.annotation.Documented;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD})
@Documented
@Inherited
public @interface SuppressExceptions {
}
    
</pre><br />
А также аспект, который бы делал всю нужную нам функциональность:<br />
<br />
<pre class="brush:java;">public aspect ExceptionSupressingAspect {

        declare soft :ServiceException:  execution(@com.blogger.atamanenko.annotation.SuppressExceptions * *.*(..));

}
</pre><br />
Данный аспект делает в точности следующее: "Смягчает" исключение <tt>ServiceException</tt> для метода, который помечен аннотацией <tt>@SuppressExceptions</tt>.<br />
<br />
Пример использования:<br />
<br />
<pre class="brush:java;">@SuppressExceptions
    protected Entity findEntity(final Identifiable id) {
        return entityService.findById(id);
    }
</pre><h4>Принудительная проверка контракта между модулями</h4>Часто нам необходимо принудительно требовать выполнения каких-то архитектурных ограничений, например, контроллеры должны работать только с сервисами и им запрещено напрямую обращаться к базе данных.<br />
<br />
Для реализации таких проверок можно также использовать возможности AOP.<br />
<br />
Предположим, что в нашем приложении модуль сервиса выставляет наружу <a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/TransferObject.html">DTO</a> для работы, скрывая при этом классы модели. Для того, чтобы явно запретить доступ к классам и методам модели нам необходимо создать аспект, который бы вызывал ошибку компиляции при нарушении ограничения.<br />
<br />
<pre class="brush:java;">aspect ForbidAccessToModelAspect {

//      Full prohibition of access to model:
        pointcut accessModel(): call(* com.blogger.atamanenko.app.model..*.*(..));
        declare error: accessModel() : "Illegal call to model";

}
</pre><br />
После объявления такого аспекта, мы получим ошибку компиляции, что, очевидным образом, приведёт к выполнению архитектурного ограничения.<br />
<br />
Если же нам необходимо разрешить доступ к одному пакету только из какого-то определённого другого, то мы можем модифицировать наш аспект следующим образом:<br />
<br />
<pre class="brush:java;">aspect ForbidAccessToModelAspect2 {

        pointcut accessModel(): call(* com.blogger.atamanenko.app.model.**.*(..));

        // Allow access to model from specific package for methods and constructors
        pointcut allowAccessModelFromSpecificPackage(): withincode(* com.blogger.atamanenko.app.allowedpackage..*.*(..));
        pointcut allowAccessModelFromSpecificPackage2(): withincode(com.blogger.atamanenko.app.allowedpackage..*.new(..));

        // forbid usage from any other methods.
        declare error: accessModel() && !(allowAccessModelFromSpecificPackage() || allowAccessModelFromSpecificPackage()):"Illegal call to Model from forbidden package";

}

</pre><br />
Такой аспект, созданный в нашем модуле запретит нам использовать классы модели из всех пакетов, кроме <tt>com.blogger.atamanenko.app.allowedpackage</tt><br />
<h4>Сборка приложения</h4>Файл аспекта нужно положить в каталог <tt>src/main/aspect</tt>, а для сборки приложения необходимо использовать не стандартный Oracle <a href="http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/javac.html">Java Compiler</a>, а <a href="http://eclipse.org/aspectj/downloads.php">AspectJ compiler</a>.<br />
<br />
Пример конфигурации для <a href="https://maven.apache.org/">Apache Maven</a>:<br />
<br />
<pre class="brush:xml;">&lt;plugin&gt;
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
    &lt;artifactId&gt;aspectj-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${aspectj-maven-plugin.version}&lt;/version&gt;
    &lt;configuration&gt;
        &lt;complianceLevel&gt;1.6&lt;/complianceLevel&gt;
        &lt;aspectLibraries&gt;
            &lt;aspectLibrary&gt;
                &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
            &lt;/aspectLibrary&gt;
        &lt;/aspectLibraries&gt;
        &lt;verbose&gt;true&lt;/verbose&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;phase&gt;process-sources&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;compile&lt;/goal&gt;
                &lt;goal&gt;test-compile&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</pre><h4>Заключение</h4>Вот в общем-то и всё. Я сознательно не стал описывать языковые конструкции аспектов, так как они подробно описаны в <a href="https://www.eclipse.org/aspectj/doc/next/progguide/index.html">руководстве AspectJ</a></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Oleg Atamanenko</div>
<div class='content'>
Можно же купить электронную версию книги для Amazon Kindle - http://www.amazon.com/Awais-Rashid/e/B001HCXO76/ref=ntt_athr_dp_pel_pop_1</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
к сожалению не получается заказать книжку, везде один и тот же ответ - можно сделать на заказ, но скорее всего не получится и никто заморачиваться не хочет =(<br />может быть еще какие-то книжки посоветуете? пжжллааллууйййссттаааа! =)</div>
</div>
<div class='comment'>
<div class='author'>Oleg Atamanenko</div>
<div class='content'>
На амазоне можно заказать используя посреднические службы доставки.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Да, и кстати, я так понял,что книга Awais Rashid в свободном доступе нет и купить можно только в Европе (не в России)???</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Спасибо за ссылку, книжка именно то, что нужно, кое чего правда нет, но для начала самое то =) Если есть еще какие-то ссылки или книги, пожалуйста скиньте ссылки, ну или сами пособия, здесь или на почту (см. первый пост). А причина использования АОП - по данной тематике в дальнейшем предполагается написание научных работ и в случае, если данная методология применительно к БД действительно актуальна, то дальнейшее ее продвижение!</div>
</div>
<div class='comment'>
<div class='author'>Oleg Atamanenko</div>
<div class='content'>
Информации в сети достаточно, нужно лишь уметь искать. Навскидку - http://www.springer.com/computer/database+management+%26+information+retrieval/book/978-3-540-00948-1<br /><br />А вообще вопрос - для чего вам в БД АОП? Мне кажется, что у вас должны быть веские основания для этого. Ведь всё вышеперечисленное (журналирование, проверка прав доступа, защита информации) решается штатными средствами базы данных.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
интересует - журнализация, проверка прав доступа, защита информации. Если где-то, в самом простом виде, смогу найти пример, то будет ясно - как вообще реализовывать. Материалов, как русскоязычных, так и англоязычных, очень мало по данной тематике. Компиляторов и методов реализации/внедрения аспектов в БД вообще не смог найти. Теперь вот пытаюсь найти людей кто хоть как-то занимался данной проблемой и найти примеры/литературу.</div>
</div>
<div class='comment'>
<div class='author'>Oleg Atamanenko</div>
<div class='content'>
Тут всё зависит от того, какие именно аспекты вас интересуют. Я, к сожалению, не могу показать вам готовое решение по причине NDA. Но могу сказать, что для полезные аспекты для БД - журналирование запросов, обработка исключений, мониторинг производительности и проверка прав доступа. Впрочем, тут тоже ничего нового.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Добрый день, прочитал Вашу статью - интересно! =) На данный момент пытаюсь вникнуть в АОП в БД, но не совсем понимаю как можно реализовать аспекты при работе с БД (именно с точки зрения системы - код, компиляция и пр. т.к. теоретически все прозрачно и ясно). Не подскажите - где можно найти, для наглядности, простенькую БД с реализованным аспектами и хоть какое-то пояснение по реализованному &quot;проекту&quot; - на чем писали, как внедряли аспекты и пр. Мэйл для связи - utopia2005@yandex.ru</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
