<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cache | Блог о разработке ПО]]></title>
  <link href="http://uthark.github.com/blog/categories/cache/atom.xml" rel="self"/>
  <link href="http://uthark.github.com/"/>
  <updated>2013-06-29T23:39:52-04:00</updated>
  <id>http://uthark.github.com/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Использование memcached в качестве backend для Spring Caching Abstraction]]></title>
    <link href="http://uthark.github.com/blog/2013/06/19/spring-caching/"/>
    <updated>2013-06-19T19:00:00-04:00</updated>
    <id>http://uthark.github.com/blog/2013/06/19/spring-caching</id>
    <content type="html"><![CDATA[<p>В <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/new-in-3.1.html">Spring 3.1</a> появился замечательный модуль &ndash; <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/cache.html">Spring Cache</a>, который является абстракцией над кэшированием, что позволяет декларативно реализовывать кэширование в приложении.</p>

<p>Я не буду вдаваться в подробности работы, их можно прочитать в документации, но опишу, каким образом можно настроить <a href="http://memcached.org/">memcached</a> в качестве бэкэнда для работы.</p>

<h2>Подключение зависимостей</h2>

<p>{% codeblock lang:xml %}
<dependency></p>

<pre><code>&lt;groupId&gt;com.google.code.simple-spring-memcached&lt;/groupId&gt;
&lt;artifactId&gt;spymemcached-provider&lt;/artifactId&gt;
&lt;version&gt;3.1.0&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;com.google.code.simple-spring-memcached&lt;/groupId&gt;
&lt;artifactId&gt;spring-cache&lt;/artifactId&gt;
&lt;version&gt;3.1.0&lt;/version&gt;
</code></pre>

<p></dependency>
{% endcodeblock %}</p>

<p><code>spymemcached-provider</code> &ndash; это библиотечка для работы с <code>memcached</code> из Java, а <code>spring-cache</code> &ndash; модуль интеграции со Spring.</p>

<h2>Включение кэширования</h2>

<p>{% codeblock lang:java %}</p>

<p>@Configuration(&ldquo;serviceConfiguration&rdquo;)
@EnableCaching(proxyTargetClass = true, mode = AdviceMode.PROXY)
@Import(CacheConfiguration.class)
public class ServiceConfiguration {
  // bean declarations goes here.
}
{% endcodeblock %}</p>

<p>Аннотация <code>@EnableCaching</code> включает кэширование. Конфигурацию бинов для кэширования мы выносим в отдельный класс, <code>CacheConfiguration</code>, чтобы не смешивать бины, отвечающие за кэширование с бинами, отвечающими за бизнес-логику.</p>

<p>Объявляем необходимые для работы бины:</p>

<p>{% codeblock lang:java %}
@Configuration
public class CacheConfiguration {</p>

<pre><code>@Value("${memcached.url}")
private String memcachedUrl;

@Bean
public CacheManager cacheManager() throws Exception {
    SSMCacheManager result = new SSMCacheManager();
    result.setCaches(Arrays.asList(
            new SSMCache(defaultCacheFactory().getObject(), 45)
    ));
    return result;
}

@Bean
public CacheFactory defaultCacheFactory() {
    CacheFactory factory = new CacheFactory();
    factory.setCacheName("defaultCache");
    factory.setAddressProvider(addressProvider());
    factory.setCacheClientFactory(cacheClientFactory());
    factory.setConfiguration(cacheConfiguration());
    return factory;
}

@Bean
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public CacheClientFactory cacheClientFactory() {
    return new MemcacheClientFactoryImpl();
}

@Bean
public AddressProvider addressProvider() {
    return new DefaultAddressProvider(memcachedUrl);
}

@Bean
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public com.google.code.ssm.providers.CacheConfiguration cacheConfiguration() {
    com.google.code.ssm.providers.CacheConfiguration configuration =
            new com.google.code.ssm.providers.CacheConfiguration();
    configuration.setConsistentHashing(true);
    return configuration;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Использование</h2>

<p>{% codeblock lang:java %}
@Cacheable(&ldquo;defaultCache&rdquo;)
public List<User> getUser(@NotNull String username) throws IOException {</p>

<pre><code>// ...
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
