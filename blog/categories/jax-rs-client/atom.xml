<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jax-rs client | Блог о разработке ПО]]></title>
  <link href="http://uthark.github.com/blog/categories/jax-rs-client/atom.xml" rel="self"/>
  <link href="http://uthark.github.com/"/>
  <updated>2013-06-29T23:39:52-04:00</updated>
  <id>http://uthark.github.com/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[@Autowired JAX-RS Client API]]></title>
    <link href="http://uthark.github.com/blog/2013/06/28/jaxrs-spring-autowiring/"/>
    <updated>2013-06-28T19:05:00-04:00</updated>
    <id>http://uthark.github.com/blog/2013/06/28/jaxrs-spring-autowiring</id>
    <content type="html"><![CDATA[<p>Продолжая разговор о <a href="http://www.jcp.org/en/jsr/detail?id=339">JAX RS</a> <a href="https://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/client/package-summary.html">Client API</a> &ndash; предположим, что мы уже <a href="/blog/2013/06/28/jaxrs/">используем JAX-RS клиент</a></p>

<p>У нас есть класс, который умеет создавать прокси для любого REST-интерфейса в проекте. Теперь мы хотим сделать так, чтобы эти интерфейсы можно было автоматически создавать в контексте Spring и связывать с другими бинами.</p>

<p>Первое решение, которое приходит в лоб &ndash; объявить бин в конфигурации для каждого интерфейса:</p>

<p>{% codeblock lang:java %}
@Configuration
public class SpringConfiguration {</p>

<pre><code>@Bean
public UserRest userRest(){
    List&lt;?&gt; providers = Arrays.asList(new JsonMessageHandler(new ObjectMapper()));
    return JAXRSClientFactory.create("http://localhost:8080", UserRest.class, providers);
}
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<p>Написав объявление нескольких таких бинов можно задуматься &ndash; &ldquo;Есть ли способ проще?&rdquo;.</p>

<p>Есть, и я вам сейчас его покажу.</p>

<p>Для того, чтобы добавлять собственные бины в Spring контекст, мы воспользуемся возможностью расширения Spring контекста с использованием <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html"><code>BeanFactoryPostProcessor</code></a>.
Метод <code>postProcessBeanFactory</code> данного класса позволяет выполнить дополнительную обработку фабрики бинов Spring, например, удалить, добавить, переопределить бин.
Это именно то, что нам нужно &ndash; автоматически добавить новые бины в фабрику.</p>

<p>Итак, что нам нужно сделать:</p>

<ol>
<li>Найти все доступные REST интерфейсы в текущем classpath.</li>
<li>Для каждого из них создать прокси с использованием <code>JAXRSClientFactory</code> .</li>
<li>Зарегистрировать каждый прокси в фабрике бинов для дальнейшего использования (например, для @Autowired).</li>
</ol>


<p>По спецификации JAX-RS, чтобы класс распознавался как REST-ресурс, у него должна быть аннотация <a href="https://jax-rs-spec.java.net/nonav/2.0/apidocs/javax/ws/rs/Path.html"><code>@Path()</code></a>.</p>

<p>Для поиска всех возможных классов/интерфейсов воспользуемся классом <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.html"><code>ClassPathScanningCandidateComponentProvider</code></a>, который умеет сканировать классы в выбранном пакете и применять фильтры, чтобы собрать только нужные. Также нам нужно учесть, что по умолчанию <code>ClassPathScanningCandidateComponentProvider</code> пытается определить, может ли найденный класс быть и бином (например, проверяет, что это не абстрактный класс и не интерфейс), поэтому нам нужно написать подкласс, который позволит нам работать с интерфейсами.</p>

<p>Пишем класс:
{% codeblock lang:java %}
public class RestClientPostProcessor implements BeanFactoryPostProcessor {</p>

<pre><code>private static final Logger LOGGER = LoggerFactory.getLogger(RestClientPostProcessor.class);

protected String endpoint = "http://localhost:8080";

private Class&lt;? extends Annotation&gt; requiredAnnotation = Path.class;

private String basePackage = "&lt;base package&gt;";

private ObjectMapper objectMapper;

// getters/setters omitted.

protected Object createBean(Class&lt;?&gt; clazz) {
    List&lt;?&gt; providers = Arrays.asList(new JsonMessageHandler(objectMapper));
    return JAXRSClientFactory.create(endpoint, clazz, providers);
}

@Override 
public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {

    ClassPathScanningCandidateComponentProvider provider = new ClasspathScanner();
    provider.addIncludeFilter(new AnnotationTypeFilter(requiredAnnotation));
    Set&lt;BeanDefinition&gt; components = provider.findCandidateComponents(basePackage);

    for (BeanDefinition component : components) {
        createAndRegisterBean(beanFactory, component);

    }
}

protected void createAndRegisterBean(ConfigurableListableBeanFactory beanFactory, BeanDefinition component) {
    try {
        String beanClassName = component.getBeanClassName();
        Class&lt;?&gt; clazz = Class.forName(beanClassName);

        Object o = createBean(clazz);

        beanFactory.registerResolvableDependency(clazz, o);
    } catch (ClassNotFoundException e) {
        LOGGER.warn("Unable to find class: {}", component.getBeanClassName(), e);
    }
}

private static class ClasspathScanner extends ClassPathScanningCandidateComponentProvider {

    public ClasspathScanner() {
        super(false);
    }

    @Override protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {
        // override this method, because our classes are interfaces, by default interfaces are
        // not allowed.
        return beanDefinition.getMetadata().isIndependent();
    }
}
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<p>Теперь этот процессор необходимо зарегистрировать в контексте Spring:
{% codeblock lang:java %}
@Configuration
class TestAutowiringConfiguration {</p>

<pre><code>@Bean
public static RestClientPostProcessor autowiringRestApiProcessor() {
    return new RestClientPostProcessor();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>И теперь можно использовать <code>UserRest</code> как обычный бин:
{% codeblock lang:java %}</p>

<pre><code>@Autowired
private UserShowRest userShowRest;
</code></pre>

<p>{% endcodeblock %}</p>

<p>Если есть вопросы &ndash; <a href="https://plus.google.com/112372998073079463630/posts">спрашивайте в Google+</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAX-RS Client API]]></title>
    <link href="http://uthark.github.com/blog/2013/06/28/jaxrs/"/>
    <updated>2013-06-28T19:00:00-04:00</updated>
    <id>http://uthark.github.com/blog/2013/06/28/jaxrs</id>
    <content type="html"><![CDATA[<p><a href="http://jcp.org/en/jsr/detail?id=339">JAX-RS</a> &ndash; набор Java API для работы с REST сервисами. Существует несколько реализаций, <a href="/blog/2012/02/08/java-rest/">о которых я уже писал раньше</a>.</p>

<p>Предположим, что проект А выставляет наружу REST API, который мы хотим использовать в проекте Б. Очевидно, что сразу возникает вопрос &ndash; можно ли переиспользовать классы модели и интерфейс в другом проекте. Ответ &ndash; да, можно. Client API, появившийся в JAX RS 2.0, упрощает реализацию клиента, но это всё равно не самый оптимальный вариант.</p>

<p>Есть более интересный способ &ndash; в замечательной библиотеке <a href="http://cxf.apache.org/">Apache CXF</a> есть класс <a href="http://cxf.apache.org/javadoc/latest/org/apache/cxf/jaxrs/client/JAXRSClientFactory.html"><code>org.apache.cxf.jaxrs.client.JAXRSClientFactory</code></a>, который позволяет автоматически получать прокси-клиент для работы с сервером.</p>

<p>К сожалению, у меня не получилось завести его с JSON без JAXB &ndash; Проблема с Generic Collections &ndash; <a href="http://cxf.apache.org/javadoc/latest/org/apache/cxf/jaxrs/provider/json/JSONProvider.html"><code>org.apache.cxf.jaxrs.provider.json.JSONProvider</code></a> подразумевает, что в проекте используется JAXB, с помощью которого у нас проаннотирована модель. Поэтому пришлось написать собственную реализацию <a href="http://docs.oracle.com/javaee/6/api/javax/ws/rs/ext/MessageBodyReader.html"><code>javax.ws.rs.ext.MessageBodyReader&lt;T&gt;</code></a> и <a href="http://docs.oracle.com/javaee/6/api/javax/ws/rs/ext/MessageBodyWriter.html">javax.ws.rs.ext.MessageBodyWriter<T></a>.</p>

<p>Основная проблема при работе с JSON &ndash; это то, что, в общем случае, у нас нет информации об используемых типах данных, а вкупе с тем, что в  Java Generics реализованы с <a href="http://docs.oracle.com/javase/tutorial/java/generics/erasure.html">Type Erasure</a> &ndash; ситуация усугубляется, если не предпринять каких-то действий.</p>

<p>Для реализации чтения будем использовать <a href="http://jackson.codehaus.org/Home">Jackson Java JSON-processor</a> и его возможности <a href="http://fasterxml.github.io/jackson-databind/javadoc/2.2.0/com/fasterxml/jackson/databind/type/TypeFactory.html"><code>com.fasterxml.jackson.databind.type.TypeFactory</code></a></p>

<p>{% codeblock lang:java %}
public class JsonMessageHandler implements MessageBodyReader<Object>, MessageBodyWriter<Object> {</p>

<pre><code>protected final ObjectMapper mapper;

public JsonMessageHandler(ObjectMapper mapper) {
    this.mapper = mapper;
}

@Override
public boolean isReadable(Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {
    return true;
}

@Override
public Object readFrom(Class&lt;Object&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap&lt;String, String&gt; httpHeaders, InputStream entityStream)
        throws IOException, WebApplicationException {
    if (genericType instanceof ParameterizedType) {
        if (Collection.class.isAssignableFrom(type)) {
            CollectionType collectionType = resolveCollectionType(type, (ParameterizedType) genericType);
            return mapper.readValue(entityStream, collectionType);
        } else if (Map.class.isAssignableFrom(type)) {
            MapType mapType = resolveMapType(type, (ParameterizedType) genericType);
            return mapper.readValue(entityStream, mapType);
        } else {
            Type[] actualTypeArguments = ((ParameterizedType) genericType).getActualTypeArguments();
            Class[] typeArgs = new Class[actualTypeArguments.length];
            for (int i = 0; i &lt; actualTypeArguments.length; i++) {
                Type actualTypeArgument = actualTypeArguments[i];
                typeArgs[i] = (Class) actualTypeArgument;
            }
            JavaType javaType =
                    TypeFactory.defaultInstance().constructParametricType(type, typeArgs);
            return mapper.readValue(entityStream, javaType);
        }

    }

    return mapper.readValue(entityStream, type);

}

private MapType resolveMapType(Class&lt;Object&gt; type, ParameterizedType genericType) {
    Type[] args = genericType.getActualTypeArguments();
    Class&lt;? extends Map&gt; mapClass = type.asSubclass(Map.class);
    return TypeFactory.defaultInstance().constructMapType(mapClass, (Class) args[0], (Class) args[1]);
}

private CollectionType resolveCollectionType(Class&lt;Object&gt; type, ParameterizedType genericType) {
    Type type1 = genericType.getActualTypeArguments()[0];
    Class&lt;? extends Collection&gt; collectionClass = type.asSubclass(Collection.class);
    return TypeFactory.defaultInstance().constructCollectionType(collectionClass, (Class) type1);
}

@Override
public boolean isWriteable(Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {
    return true;
}

@Override
public long getSize(Object o, Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {
    return -1L;
}

@Override
public void writeTo(Object o, Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap&lt;String, Object&gt; httpHeaders, OutputStream entityStream)
        throws IOException, WebApplicationException {
    mapper.writeValue(entityStream, o);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Основной код класса сосредоточен в методе <code>readFrom</code>, который определяет типизацию класса и создаёт необходимый подкласс <code>com.fasterxml.jackson.databind.JavaType</code>, который будет использован во время десериализации.</p>

<p>Теперь мы можем создать клиента следующим образом:
{% codeblock lang:java %}</p>

<pre><code>    List&lt;?&gt; providers = Arrays.asList(new JsonMessageHandler(objectMapper));
    UserRest userRest = JAXRSClientFactory.create("http://localhost:8080", UserRest.class, providers);

    // usage:
    User user = userRest.findByLogin("uthark");
</code></pre>

<p>{% endcodeblock %}</p>

<p>Когда вызывается метод <code>findByLogin</code> под капотом создаётся HTTP Request, дёргается сервер и полученный ответ десериализуется. От конечного пользотеля детали реализации API скрыты.</p>

<p>В <a href="/blog/2013/06/28/jaxrs-spring-autowiring/">следующем посте</a> описано, как автоматически добавить полученные прокси в фабрику бинов Spring для дальнейшего использования.</p>
]]></content>
  </entry>
  
</feed>
